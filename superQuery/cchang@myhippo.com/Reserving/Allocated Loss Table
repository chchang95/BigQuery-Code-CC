with policies as (
select policy_id
, eps.product, carrier
, case when state = 'ca' or state = 'tx' then state else 'other' end as state_grouped
, state
, date_trunc(date_policy_effective, MONTH) as policy_effective_month
, round(risk_score,4) as noncat_uw_score
, property_data_address_zip as zip
, case when property_data_year_built is null then 'Missing'
        when cast(property_data_year_built as numeric) >= 2000 then 'Post 2000' 
        when cast(property_data_year_built as numeric) >= 1980 then 'Pre 2000' 
        else 'Pre 1980' end as year_built
, channel
, case when renewal_number = 0 then "New" else "Renewal" end as tenure
, case when zips.Status = 'Shut Off' then 'shut_zip' else 'open' end as zip_status
from dw_prod_extracts.ext_policy_snapshots eps
left join dbt_cchin.noncat_uw_scored_policies_20201031 using(policy_id)
left join (select policy_id, case when channel is null then 'Online' else channel end as channel from dw_prod.dim_policies) using(policy_id)
left join dbt_cchin.ca_moratorium_zips_august_2020 zips on safe_cast(eps.property_data_address_zip as numeric) = cast(zips.Zips_to_Shut_Off as numeric) and eps.product = lower(zips.Product)
where date_snapshot = '2020-12-28'
)
,claims_supp as (
select mon.*
    , case when cc.cat_ind is true then 'Y'
    when cc.cat_ind is false then 'N'
    when peril = 'wind' or peril = 'hail' then 'Y'
    when cat_code is not null then 'Y'
        else 'N' end as CAT
    , case when cc.recoded_loss_date is null then date_of_loss else cc.recoded_loss_date end as recoded_loss_date
    , case when cc.recoded_loss_event is null then 'NA' else cc.recoded_loss_event end as recoded_loss_event
,coalesce(recoverable_depreciation,0) as total_recoverable_depreciation
,coalesce(loss_paid,0) + coalesce(loss_net_reserve,0) - coalesce(recoveries,0) as loss_incurred_calc
,coalesce(expense_paid,0) + coalesce(expense_net_reserve,0) as expense_incurred_calc
,coalesce(loss_paid,0) + coalesce(loss_net_reserve,0) + coalesce(expense_paid,0) + coalesce(expense_net_reserve,0) - coalesce(recoveries,0) as total_incurred_calc
from dbt_cchin.ext_all_claims_combined_20201228 mon
left join dbt_cchin.cat_coding_w_loss_20201218 cc on (case when tbl_source = 'topa_tpa_claims' then trim(mon.claim_number,'0') else mon.claim_number end) = cast(cc.claim_number as string)
where carrier <> 'canopius'
-- and date_knowledge = '2020-12-28'
)
, loss as (
SELECT
    policy_id,
    mon.date_knowledge,
    last_day(date_trunc(recoded_loss_date, MONTH),MONTH) as accident_month,
    reinsurance_treaty
    
## Total Loss

,sum(loss_paid-recoveries) as paid_loss_inc_recoveries_cumulative
,sum(expense_paid) as paid_expense_cumulative
,sum(total_paid) as paid_total_cumulative

,sum(loss_net_reserve) as outstanding_loss_case_reserves
,sum(expense_net_reserve) as outstanding_expense_case_reserves
,sum(total_net_reserve) as outstanding_total_case_reserves

,sum(recoveries) as total_recoveries

,sum(loss_incurred_calc) as incurred_loss_inc_recoveries_cumulative
,sum(expense_incurred_calc) as incurred_expense_cumulative
,sum(total_incurred_calc) as incurred_total_cumulative

,sum(total_recoverable_depreciation) as outstanding_recoverable_depreciation


## Capped Loss

,sum(least(100000,loss_incurred_calc)) as capped_incurred_loss_inc_recoveries_at_100k
,sum(loss_incurred_calc - least(100000,loss_incurred_calc)) as excess_incurred_loss_inc_recoveries_at_100k

,sum(case when loss_incurred_calc = 0 then 0 else ((loss_paid-recoveries) / loss_incurred_calc) * least(100000,loss_incurred_calc) end) as capped_loss_paid_inc_recoveries_at_100k
,sum(case when loss_incurred_calc = 0 then 0 else (loss_paid-recoveries) - (((loss_paid-recoveries) / loss_incurred_calc) * least(100000,loss_incurred_calc)) end) as excess_loss_paid_inc_recoveries_at_100k

,sum(case when loss_incurred_calc = 0 then 0 else (loss_net_reserve / loss_incurred_calc) * least(100000,loss_incurred_calc) end) as capped_loss_case_reserves_at_100k
,sum(case when loss_incurred_calc = 0 then 0 else loss_net_reserve - ((loss_net_reserve / loss_incurred_calc) * least(100000,loss_incurred_calc)) end) as excess_loss_case_reserves_at_100k

,count(distinct mon.claim_number) as reported_claim_count
,sum(case when date_closed is null then 1 else 0 end) as open_claim_count
,sum(case when date_closed is null then 0 else 1 end) as closed_claim_count

,sum(case when claim_closed_no_total_payment is true then 0 else 1 end) as reported_claim_count_x_Closed_No_TOTAL_Pay
,sum(case when claim_closed_no_loss_payment is true then 0 else 1 end) as reported_claim_count_x_Closed_No_LOSS_Pay

,sum(case when date_closed is null then 0 when claim_closed_no_total_payment is true then 0 else 1 end) as closed_claim_count_x_Closed_No_TOTAL_Pay
,sum(case when date_closed is null then 0 when claim_closed_no_loss_payment is true then 0 else 1 end) as closed_claim_count_x_Closed_No_LOSS_Pay
,sum(case when date_closed is null then 0 when claim_closed_no_total_payment is true then 1 else 0 end) as closed_claim_count_No_TOTAL_Pay
,sum(case when date_closed is null then 0 when claim_closed_no_loss_payment is true then 1 else 0 end) as closed_claim_count_No_LOSS_Pay

,sum(case when claim_closed_no_total_payment is true then 0 when total_incurred_calc >= 100000 then 1 else 0 end) as reported_claim_count_x_Closed_No_TOTAL_Pay_excess_100k
,sum(case when claim_closed_no_loss_payment is true then 0 when total_incurred_calc >= 100000 then 1 else 0 end) as reported_claim_count_x_Closed_No_LOSS_Pay_excess_100k
  FROM
    claims_supp mon
  where is_ebsl is false
  and carrier <> 'canopius'
  and date_knowledge = '2020-12-28'
  group by 1,2,3,4
 )
, premium as (
    select 
        epud.policy_id
        , date_calendar_month_accounting_basis as date_accounting_start
        , reinsurance_treaty_property_accounting
        
        ,sum(written_base + written_total_optionals - written_optionals_equipment_breakdown - written_optionals_service_line) as written_prem_x_ebsl_x_policy_fees
        ,sum(earned_base + earned_total_optionals - earned_optionals_equipment_breakdown - earned_optionals_service_line) as earned_prem_x_ebsl_x_policy_fees
        
        ,sum(earned_base + earned_total_optionals + earned_policy_fee) as earned_prem_inc_ebsl_inc_pol_fees
        ,sum(written_base + written_total_optionals + written_policy_fee) as written_prem_inc_ebsl_inc_pol_fees
        
        ,sum(written_optionals_equipment_breakdown + written_optionals_service_line) as written_EBSL
        ,sum(earned_optionals_equipment_breakdown + earned_optionals_service_line) as earned_EBSL
        
        ,sum(written_exposure) as written_exposure
        ,sum(earned_exposure) as earned_exposure
        
        ,sum(written_policy_fee) as written_policy_fee
        ,sum(earned_policy_fee) as earned_policy_fee
        
        ,sum(expense_load_digital) as written_expense_load
        ,sum(expense_load_digital*earned_exposure) as earned_expense_load
        
        ,sum((written_base + written_total_optionals - written_optionals_equipment_breakdown - written_optionals_service_line - expense_load_digital) * coalesce(on_level_factor,1)) as on_leveled_written_prem_x_ebsl_x_pol_fees_x_exp_load
        ,sum((earned_base + earned_total_optionals - earned_optionals_equipment_breakdown - earned_optionals_service_line - expense_load_digital*earned_exposure) * coalesce(on_level_factor,1)) as on_leveled_earned_prem_x_ebsl_x_pol_fees_x_exp_load
        
from dbt_cchin.ext_today_knowledge_policy_monthly_premiums_20201228 epud
    left join (select policy_id, on_level_factor from dw_staging_extracts.ext_policy_snapshots where date_snapshot = '2020-12-28') seps on seps.policy_id = epud.policy_id
    left join dw_prod.map_expense_loads as exp ON epud.state=exp.state and epud.product=exp.product and epud.carrier = exp.carrier
        where date_knowledge = '2020-12-28'
        and epud.carrier <> 'canopius'
group by 1,2,3
)
, aggregated as (
    select 
-- coalesce(date_knowledge,date_accounting_start) as calendar_month,
coalesce(accident_month,date_accounting_start) as accident_month,
coalesce(p.policy_id, l.policy_id) as policy_id,
coalesce(p.reinsurance_treaty_property_accounting, l.reinsurance_treaty) as reinsurance_treaty

,sum(coalesce(paid_loss_inc_recoveries_cumulative,0)) as paid_loss_inc_recoveries_cumulative
,sum(coalesce(paid_expense_cumulative,0)) as paid_expense_cumulative
,sum(coalesce(paid_total_cumulative,0)) as paid_total_cumulative
,sum(coalesce(outstanding_loss_case_reserves,0)) as outstanding_loss_case_reserves
,sum(coalesce(outstanding_expense_case_reserves,0)) as outstanding_expense_case_reserves
,sum(coalesce(outstanding_total_case_reserves,0)) as outstanding_total_case_reserves
,sum(coalesce(total_recoveries,0)) as total_recoveries
,sum(coalesce(incurred_loss_inc_recoveries_cumulative,0)) as incurred_loss_inc_recoveries_cumulative
,sum(coalesce(incurred_expense_cumulative,0)) as incurred_expense_cumulative
,sum(coalesce(incurred_total_cumulative,0)) as incurred_total_cumulative
,sum(coalesce(outstanding_recoverable_depreciation,0)) as outstanding_recoverable_depreciation
,sum(coalesce(capped_incurred_loss_inc_recoveries_at_100k,0)) as capped_incurred_loss_inc_recoveries_at_100k
,sum(coalesce(excess_incurred_loss_inc_recoveries_at_100k,0)) as excess_incurred_loss_inc_recoveries_at_100k
,sum(coalesce(capped_loss_paid_inc_recoveries_at_100k,0)) as capped_loss_paid_inc_recoveries_at_100k
,sum(coalesce(excess_loss_paid_inc_recoveries_at_100k,0)) as excess_loss_paid_inc_recoveries_at_100k
,sum(coalesce(capped_loss_case_reserves_at_100k,0)) as capped_loss_case_reserves_at_100k
,sum(coalesce(excess_loss_case_reserves_at_100k,0)) as excess_loss_case_reserves_at_100k
,sum(coalesce(reported_claim_count,0)) as reported_claim_count
,sum(coalesce(open_claim_count,0)) as open_claim_count
,sum(coalesce(closed_claim_count,0)) as closed_claim_count
,sum(coalesce(reported_claim_count_x_Closed_No_TOTAL_Pay,0)) as reported_claim_count_x_Closed_No_TOTAL_Pay
,sum(coalesce(reported_claim_count_x_Closed_No_LOSS_Pay,0)) as reported_claim_count_x_Closed_No_LOSS_Pay
,sum(coalesce(closed_claim_count_x_Closed_No_TOTAL_Pay,0)) as closed_claim_count_x_Closed_No_TOTAL_Pay
,sum(coalesce(closed_claim_count_x_Closed_No_LOSS_Pay,0)) as closed_claim_count_x_Closed_No_LOSS_Pay
,sum(coalesce(closed_claim_count_No_TOTAL_Pay,0)) as closed_claim_count_No_TOTAL_Pay
,sum(coalesce(closed_claim_count_No_LOSS_Pay,0)) as closed_claim_count_No_LOSS_Pay
,sum(coalesce(reported_claim_count_x_Closed_No_TOTAL_Pay_excess_100k,0)) as reported_claim_count_x_Closed_No_TOTAL_Pay_excess_100k
,sum(coalesce(reported_claim_count_x_Closed_No_LOSS_Pay_excess_100k,0)) as reported_claim_count_x_Closed_No_LOSS_Pay_excess_100k


,sum(coalesce(written_prem_x_ebsl_x_policy_fees,0)) as written_prem_x_ebsl_x_policy_fees
,sum(coalesce(earned_prem_x_ebsl_x_policy_fees,0)) as earned_prem_x_ebsl_x_policy_fees
,sum(coalesce(written_prem_inc_ebsl_inc_pol_fees,0)) as written_prem_inc_ebsl_inc_pol_fees
,sum(coalesce(earned_prem_inc_ebsl_inc_pol_fees,0)) as earned_prem_inc_ebsl_inc_pol_fees
,sum(coalesce(written_EBSL,0)) as written_EBSL
,sum(coalesce(earned_EBSL,0)) as earned_EBSL
,sum(coalesce(written_exposure,0)) as written_exposure
,sum(coalesce(earned_exposure,0)) as earned_exposure
,sum(coalesce(written_policy_fee,0)) as written_policy_fee
,sum(coalesce(earned_policy_fee,0)) as earned_policy_fee
,sum(coalesce(written_expense_load,0)) as written_expense_load
,sum(coalesce(earned_expense_load,0)) as earned_expense_load
,sum(coalesce(on_leveled_written_prem_x_ebsl_x_pol_fees_x_exp_load,0)) as on_leveled_written_prem_x_ebsl_x_pol_fees_x_exp_load
,sum(coalesce(on_leveled_earned_prem_x_ebsl_x_pol_fees_x_exp_load,0)) as on_leveled_earned_prem_x_ebsl_x_pol_fees_x_exp_load

from premium p
full join loss l ON
-- p.date_accounting_start = l.date_knowledge AND
p.date_accounting_start = l.accident_month AND
p.policy_id = l.policy_id AND
p.reinsurance_treaty_property_accounting = l.reinsurance_treaty
group by 1,2,3
)
, final as (
select 
last_day(date_trunc(accident_month, MONTH),MONTH) as accident_month_recoded
,last_day(date_trunc(accident_month, QUARTER),QUARTER) as accident_quarter_recoded
,extract(YEAR from accident_month) as accident_year_recoded
,product
,state
,tenure
,reinsurance_treaty
,policy_effective_month

,sum(coalesce(paid_loss_inc_recoveries_cumulative,0)) as paid_loss_inc_recoveries_cumulative
,sum(coalesce(paid_expense_cumulative,0)) as paid_expense_cumulative
,sum(coalesce(paid_total_cumulative,0)) as paid_total_cumulative
,sum(coalesce(outstanding_loss_case_reserves,0)) as outstanding_loss_case_reserves
,sum(coalesce(outstanding_expense_case_reserves,0)) as outstanding_expense_case_reserves
,sum(coalesce(outstanding_total_case_reserves,0)) as outstanding_total_case_reserves
,sum(coalesce(total_recoveries,0)) as total_recoveries
,sum(coalesce(incurred_loss_inc_recoveries_cumulative,0)) as incurred_loss_inc_recoveries_cumulative
,sum(coalesce(incurred_expense_cumulative,0)) as incurred_expense_cumulative
,sum(coalesce(incurred_total_cumulative,0)) as incurred_total_cumulative
,sum(coalesce(outstanding_recoverable_depreciation,0)) as outstanding_recoverable_depreciation
,sum(coalesce(capped_incurred_loss_inc_recoveries_at_100k,0)) as capped_incurred_loss_inc_recoveries_at_100k
,sum(coalesce(excess_incurred_loss_inc_recoveries_at_100k,0)) as excess_incurred_loss_inc_recoveries_at_100k
,sum(coalesce(capped_loss_paid_inc_recoveries_at_100k,0)) as capped_loss_paid_inc_recoveries_at_100k
,sum(coalesce(excess_loss_paid_inc_recoveries_at_100k,0)) as excess_loss_paid_inc_recoveries_at_100k
,sum(coalesce(capped_loss_case_reserves_at_100k,0)) as capped_loss_case_reserves_at_100k
,sum(coalesce(excess_loss_case_reserves_at_100k,0)) as excess_loss_case_reserves_at_100k
,sum(coalesce(reported_claim_count,0)) as reported_claim_count
,sum(coalesce(open_claim_count,0)) as open_claim_count
,sum(coalesce(closed_claim_count,0)) as closed_claim_count
,sum(coalesce(reported_claim_count_x_Closed_No_TOTAL_Pay,0)) as reported_claim_count_x_Closed_No_TOTAL_Pay
,sum(coalesce(reported_claim_count_x_Closed_No_LOSS_Pay,0)) as reported_claim_count_x_Closed_No_LOSS_Pay
,sum(coalesce(closed_claim_count_x_Closed_No_TOTAL_Pay,0)) as closed_claim_count_x_Closed_No_TOTAL_Pay
,sum(coalesce(closed_claim_count_x_Closed_No_LOSS_Pay,0)) as closed_claim_count_x_Closed_No_LOSS_Pay
,sum(coalesce(closed_claim_count_No_TOTAL_Pay,0)) as closed_claim_count_No_TOTAL_Pay
,sum(coalesce(closed_claim_count_No_LOSS_Pay,0)) as closed_claim_count_No_LOSS_Pay
,sum(coalesce(reported_claim_count_x_Closed_No_TOTAL_Pay_excess_100k,0)) as reported_claim_count_x_Closed_No_TOTAL_Pay_excess_100k
,sum(coalesce(reported_claim_count_x_Closed_No_LOSS_Pay_excess_100k,0)) as reported_claim_count_x_Closed_No_LOSS_Pay_excess_100k


,sum(coalesce(written_prem_x_ebsl_x_policy_fees,0)) as written_prem_x_ebsl_x_policy_fees
,sum(coalesce(earned_prem_x_ebsl_x_policy_fees,0)) as earned_prem_x_ebsl_x_policy_fees
,sum(coalesce(written_prem_inc_ebsl_inc_pol_fees,0)) as written_prem_inc_ebsl_inc_pol_fees
,sum(coalesce(earned_prem_inc_ebsl_inc_pol_fees,0)) as earned_prem_inc_ebsl_inc_pol_fees
,sum(coalesce(written_EBSL,0)) as written_EBSL
,sum(coalesce(earned_EBSL,0)) as earned_EBSL
,sum(coalesce(written_exposure,0)) as written_exposure
,sum(coalesce(earned_exposure,0)) as earned_exposure
,sum(coalesce(written_policy_fee,0)) as written_policy_fee
,sum(coalesce(earned_policy_fee,0)) as earned_policy_fee
,sum(coalesce(written_expense_load,0)) as written_expense_load
,sum(coalesce(earned_expense_load,0)) as earned_expense_load
,sum(coalesce(on_leveled_written_prem_x_ebsl_x_pol_fees_x_exp_load,0)) as on_leveled_written_prem_x_ebsl_x_pol_fees_x_exp_load
,sum(coalesce(on_leveled_earned_prem_x_ebsl_x_pol_fees_x_exp_load,0)) as on_leveled_earned_prem_x_ebsl_x_pol_fees_x_exp_load

from aggregated a
left join policies using(policy_id) 
where 1=1
-- and product <> 'ho5'
group by 1,2,3,4,5,6,7,8
)
select sum(incurred_total_cumulative) as incurred_total_cumulative
, sum(written_prem_x_ebsl_x_policy_fees) as written_prem_x_ebsl_x_policy_fees
, sum(earned_prem_x_ebsl_x_policy_fees) as earned_prem_x_ebsl_x_policy_fees
from final